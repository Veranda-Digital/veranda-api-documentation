openapi: 3.0.0
servers:
  - url: "http://getveranda.com"
info:
  description: |
    This is an OpenAPI representation of the Veranda Digital app API.
    You can find the app at (https://app.getveranda.com). None of these
    endpoints can currently be activated through this page, for access
    to the API itself, please contact the

    # Who we are
    Veranda Digital Inc. is the creator of the Veranda App and food delivery
    box service(?). The aim is to connect the last mile of food distribution, by
    creating a food-safe and sustainable store-to-client focused solution. By
    having both clients and delivery service workers able to have access to the
    Veranda boxes. Additionally, users can track their delivery progress through
    the tags(?) included in each delivery, which also allows the ability to view
    temperatures of the food being delivered.
  version: "0.0.1"
  title: Veranda Digital App
  termsOfService: "http://app.getveranda.com/"
  contact:
    name: Patrick Houlding
    email: patrick.houlding@getveranda.com
  x-logo:
    url: "https://raw.githubusercontent.com/Veranda-Digital/veranda-api-documentation/master/assets/veranda_logo.svg"
    altText: Veranda Digital Inc. logo
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: Admin Lock
    description: Lock endpoints for Admin
  - name: Admin Cognito
    description: Cognito endpoints for Admin
  - name: Admin Versioning
    description: Versioning endpoints for Admin
  - name: Client App_Users
    description: App_Users endpoints for Clients
    x-displayName: Users
  - name: Client Lock_Roles
    description: Client endpoints for Lock_Roles
    x-displayName: Lock
  - name: Client Lock_Telemetry
    description: Client endpoints for Lock_Telemetry
    x-displayName: Lock Telemetry
  - name: Client Lock_Usage_Record
    description: Client endpoints for Usage
    x-displayName: Lock Usage Records
  - name: Dev Lock_Roles
    description: Dev endpoints for Lock_Roles
    x-displayName: Lock Roles
  - name: Dev Lock_Usage_Record
    description: Dev endpoints for Lock_Usage_Record
    x-displayName: Lock Usage Record
  - name: Dev lock
    description: Dev endpoints for Lock
    x-displayName: Lock
  - name: Dev tools
    description: Dev endpoints for tools
    x-displayName: Tools
  - name: Dev users
    description: Dev endpoints for Users
    x-displayName: Users
  - name: LoRa Lock_Telemetry
    description: LoRa Lock_Telemetry
x-tagGroups:
  - name: Utilities
    tags:
      - Utilities
  - name: Admin
    tags:
      - Admin Lock
      - Admin Cognito
      - Admin Versioning
  - name: Client
    tags:
      - Client App_Users
      - Client Lock_Roles
      - Client Lock_Telemetry
      - Client Lock_Usage_Record
  - name: LoRa
    tags:
      - LoRa Lock_Telemetry
  - name: Integration
    tags:
      - Integration Amazon
      - Amazon Offline

parameters:
  limitParam:
    in: query
    name: limit
    type: integer
    description: limits the results returned to N objects
  pageParam:
    in: query
    name: page
    type: integer
    description: the page being viewed of the api response

paths:
  /:
    get:
      tags:
        - Utilities
      summary: Server Ping
      description: Pings the server and returns "Pong!" on success
      operationId: ping
      responses:
        "200":
          description: Successful Operation
  /test:
    get:
      tags:
        - Utilities
      summary: Test
      description: Not entirely certain what this operation does
      operationId: test
      responses:
        "200":
          description: Successful Operation

  /v1/admin/lock:
    post:
      tags:
        - Admin Lock
      summary: Create Lock
      description: Adds a lock to the database with admin privileges
      operationId: lock.createLock_v1
      responses:
        "201":
          description: Successful operation
        "500":
          description: Error
        "400":
          description: Invalid input
      security:
        - veranda_auth:
            - "tbd"
      x-codeSamples:
        - lang: "PHP"
          source: |
            to be filled in
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [id, platform_id, platform],
                properties:
                  {
                    id: { type: number, format: int64 },
                    platform_id: { type: string, format: uuid },
                    platform: { type: string },
                  },
              }
  /v1/admin/lock/{id}:
    delete:
      tags:
        - Admin Lock
      summary: Delete Lock
      description: "Deletes a lock from the system"
      operationId: lock.deleteLock_v1
      parameters:
        - name: lockID
          in: path
          description: Lock ID to delete
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid lock ID, must include a device EUI
        "500":
          description: Lock ID not found, could not delete
        "200":
          description: Successful operation
    get:
      tags:
        - Admin Lock
      summary: Get Lock
      description: Returns a given lock from ID
      operationId: lock.getLock_v1
      parameters:
        - name: lockID
          in: path
          required: true
          schema:
            type: string
      response:
        "400":
          description: Invalid lock ID, must include a device EUI
        "404":
          description: Could not identify lock
        "500":
          description: Error completing process
        "200":
          description: Successful operation

  /v1/admin/lock/{id}/version:
    get:
      tags:
        - Admin Versioning
      summary: Get lock version
      description: Returns the version of given lock
      operationId: versioning.requestLockVersion_v1
      parameters:
        - name: lockID
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid input
        "500":
          description: Error completing process
        "200":
          description: Operation Successful

  /signup:
    post:
      tags:
        - Admin Cognito
      summary: AWS Cognito Signup
      description: Sends POST request to AWS Cognito with user information
      operationId: cognito.cognitoSignUp
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [Username, Password, ClientID, name, family_name],
                properties:
                  {
                    Username: { type: string, format: email },
                    Password: { type: string },
                    ClientID: { type: string },
                    name: { type: string },
                    family_name: { type: string },
                  },
              }
  /v1/lorauplink:
    post:
      tags:
        - LoRa Lock_Telemetry
      summary:
        - Create uplink data
      operationId: /lora/lock_telemetry.lorauplink_v1
      responses:
        "500":
          description: Could not identify lock
        "404":
          description: Lock not found
        "201":
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required:
                  [
                    Device EUI,
                    lock_id,
                    logged_time,
                    frequency,
                    payload,
                    gateway,
                    rssi,
                    snr,
                    message,
                    state,
                    battery,
                    temperature,
                  ],
                optional: [gateway_name],
                properties:
                  {
                    Device EUI: { type: string },
                    lock_id: { type: number },
                    logged_time: { type: string },
                    frequency: { type: number },
                    payload: { type: string },
                    rssi: { type: number },
                    snr: { type: number },
                    message: { type: string },
                    state: { type: string },
                    battery: { type: number },
                    temperature: { type: number },
                    gateway_name: { type: string },
                  },
              }
  /v1/profile:
    get:
      tags:
        - Client App_Users
      summary: GET user profile data from JWT
      description: Takes a JWT and returns a user's profile
      operationId: /client/app_users.getProfile_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: Not found
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: ["JSON web token"],
                properties: { JSON web token: { type: string, format: uuid } },
              }

  /v1/locks/owned:
    get:
      tags:
        - Client Lock_Roles
      summary: GET all locks for given user
      description: Returns all locks associated with user
      operationId: /client/lock_roles.ownedLocks_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: Locks not found
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/pageParam'
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [JSON web token],
                properties: { JSON web token: { type: string, format: uuid } },
              }
  /v1/locks/{id}/shared-users:
    get:
      tags:
        - Client Lock_Roles
      summary: GET all shared users
      description: Returns list of users that a sharing a given lock
      operationId: /client/lock_roles.getUsersSharing_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: No locks found
        "400":
          description: Invalid input (lockId)
      parameters:
        - name: lockID
          in: path
          description: Lock ID to fetch sharing users
          required: true
          schema:
            type: string
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/pageParam'
    post:
      tags:
        - Client Lock_Roles
      summary: Add a shared client to lock
      description: Shares a lock with a given user
      operationId: /client/lock_roles/addSharedUser_v1
      responses:
        "400":
          description: Error with provided information (lock ID, email, adding yourself)
        "403":
          description: Insufficient permissions to add user to lock (i.e. you do not own the lock)
        "404":
          description: No user exists with email provided
        "500":
          description: Error completing process
        "201":
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [User email],
                properties: { User email: { type: string, format: email } },
              }
    delete:
      tags:
        - Client Lock_Roles
      summary: Deletes shared user from lock
      description: Unshares a lock with a given user
      operationId: /client/lock_roles/removeSharedUser_v1
      responses:
        "400":
          description: Error with provided information (lock ID, email)
        "403":
          description: Insufficient permissions to remove user from lock (i.e. you do not own the lock)
        "404":
          description: Could not find user with matching username/email
        "500":
          description: Error completing process
        "200":
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [User email],
                properties: { User email: { type: string, format: email } },
              }
  /v1/locks/shared/{id}:
    delete:
      tags:
        - Client Lock_Roles
      summary: Remove self from shared lock
      description: Removes the user invoking action from a lock they are a shared user on
      operationId: /client/lock_roles/deleteSharedLock_v1
      parameters:
        - name: lockID
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid lock ID
        "404":
          description: No lock found with given ID
        "200":
          description: Successful operation
        "500":
          description: Error completing process

  /v1/locks/shared:
    get:
      tags:
        - Client Lock_Roles
      summary: GET shared locks from given JWT
      description: Gets all shared locks for given user
      operationId: /client/lock_roles.sharedLocks_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: No locks found
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/pageParam'
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [JSON web token],
                properties: { JSON web token: { type: string, format: uuid } },
              }
  /v1/locks/{id}:
    get:
      tags:
        - Client Lock_Roles
      summary: GET a given user's registered lock
      description: Gets a specific registered lock for a user
      operationId: /client/lock_roles.getLock_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: No locks found, either no lock id number or lacking permissions
        "400":
          description: Invalid input
        "403":
          description: Insufficient permissions to view lock
      parameters:
        - name: lockID
          in: path
          description: Lock ID to fetch registered locks
          required: true
          schema:
            type: string
    put:
      tags:
        - Client Lock_Roles
      summary: Change name of lock
      description: Changes the name of the lock for the single user only
      operationId: /client/lock_roles.changeLockName_v1
      responses:
        "400":
          description: Invalid lock ID
        "201":
          description: Successful operation
        "500":
          description: Error completing request
      parameters:
        - name: lockID
          in: path
          description: Lock ID to fetch sharing users
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [name],
                properties: { name: { type: string } }
              }
  /v1/locks/register/{reg_id}:
    post:
      tags:
        - Client Lock_Roles
      summary: POST lock to User
      description: Registers lock to given user
      operationId: /client/lock_roles.registerLock_v1
      responses:
        "201":
          description: Successful operation
        "500":
          description: Not found
        "400":
          description: Invalid input
        "403":
          description: Lock button not pressed
      parameters:
        - name: reg_id
          in: path
          description: registration ID to register lock
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [Lock Name],
                properties: { Lock Name: { type: string } },
              }
    delete:
      tags:
        - Client Lock_Roles
      summary: DELETE lock from User
      description: Deletes (unregisters) lock from given user
      operationId: /client/lock_roles.deregisterLock_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: Could not delete lock
        "403":
          description: Invalid permissions (not an owned lock)
      parameters:
        - name: id
          in: path
          description: ID of lock to delete
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              {
                type: object,
                required: [JSON web token],
                properties: { JSON web token: { type: string, format: uuid } },
              }
  /v1/locks/{id}/telemetry:
    get:
      tags:
        - Client Lock_Telemetry
      summary: GET lock telemetry for user
      description: Fetches lock telemetry data for a specific lock
      operationId: /client/lock_telemetry.getLockTelemetry_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error fetching telemetry data
        "400":
          description: Invalid input
      parameters:
        - name: id
          in: path
          description: ID of lock to fetch telemetry data
          required: true
          schema:
            type: string
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/pageParam'
  /v1/locks/{id}/connectivity-logs:
    get:
      tags:
        - Client Lock_Usage_Record
      summary: GET logs of given lock
      description: Fetches logs of a given lock
      operationId: /client/lock_usage_record.getLockLogs_v1
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error fetching logs of lock
        "400":
          description: Invalid input
      parameters:
        - name: id
          in: path
          description: ID of lock to fetch logs of
          required: true
          schema:
            type: string
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/pageParam'
  /v1/locks/{id}/unlock:
    post:
      tags:
        - Client Lock_Usage_Record
      summary: POST unlock message to be queued in AWS and LoRaWAN
      description: Sends unlock message to lock through either AWS or LoRaWAN
      operationId: /client/lock_usage_record.unlockLock_v1
      responses:
        "201":
          description: Successful operation
        "500":
          description: Error unlocking lock
        "400":
          description: Invalid input
        "403":
          description: Invalid permissions to view lock logs
      parameters:
        - name: id
          in: path
          description: ID of lock to send unlock message
          required: true
          schema:
            type: string
  /v1/orders/amazon:
    get:
      tags:
        - Integration Amazon
      summary: GETs amazon orders page
      description: Returns list of user's amazon orders
      operationId: api/scraping/amazon_scrape.getAmazonOrders_v1
      responses:
        "500":
          description: Login credentials do not exist
        "200":
          description: Orders returned successfully
        "400":
          description: Order page not found
  /v1/orders/amazon/creds:
    get:
      tags:
        - Integration Amazon
      summary: GETs if amazon login exists in DB
      description: Fetches if an account has a registered amazon login
      operationId: api/scraping/store_login.checkForAmazonCredentials_v1
      responses:
        "200":
          description: Successfully find an amazon login in the database
        "204":
          description: Fails to find an amazon login registered to the account
        "500":
          description: Internal server error
    post:
      tags:
        - Integration Amazon
      summary: PUTs amazon login into DB
      description: Tests login and adds a user's encrypted credentials to the DB for later use
      operationId: api/scraping/store_login.storeAmazonLogin_v1
      responses:
        "400":
          description: Error with username or password, possible duplicate information
        "500":
          description: Server/database error
        "201":
          description: Successfully stored amazon login
    delete:
      tags:
        - Integration Amazon
      summary: DELETEs amazon login from DB
      description: Deletes Amazon credentials linked to user's JWT from the database
      operationId: api/scraping/store_login.removeAmazonLogin_v1
      responses:
        "200":
          description: Successfully deleted amazon credentials
        "500":
          description: Server/database error deleting amazon login
    put:
      tags:
        - Integration Amazon
      summary: PUTs new amazon login into DB
      description: Tests login for valid credentials, then updates registered amazon account to user's JWT
      operationId: api/scraping/store_login.updateAmazonLogin_v1
      responses:
        "400":
          description: Error with credentials passed
        "201":
          description: Successfully updated amazon credentials
        "500":
          description: Server/database error updating credentials
        "404":
          description: Amazon account with specified credentials does not exist

  /v1/orders/amazon/offline:
    get:
      tags:
        - Amazon Offline
      summary:
        - GETs amazon orders from DB
      description: Fetches orders and products from the two DB tables
      operationId: api/scraping/offline_orders.getAmazonOffline_v1
      responses:
      "200":
        description: Successfully grabbed Amazon orders from DB
      "500":
        description: Server/database error getting orders
    put:
      tags:
        - Amazon Offline
      summary:
        - PUTs new amazon orders into DB
      description: Fetches new amazon orders not currently in DB
      operationId: api/scraping/offline_orders.storeAmazonOffline_v1
      responses:
      "401":
        description: Error logging into amazon orders page
      "403":
        description: Pending approval email or text to let scraper log in
      "500":
        description: Server/database error fetching new orders
      "201":
        description: Successfully updated DB with orders and products
      "400":
        description: Order page not found
    delete:
      tags:
        - Amazon Offline
      summary:
        - DELETEs amazon orders from DB
      description: Deletes all amazon orders from DB associated with user
      operationId: api/scraping/offline_orders.deleteAmazonOffline_v1
      responses:
      "500":
        description: Server/database error deleting orders
      "200":
        description: Successfully deleted amazon orders
      "400":
        description: No orders associated with user found 

x-webhooks:
  AWS Cognito Post Confirmation:
    post:
      tags:
        - Admin Cognito
      summary: Post Confirmation
      description: Duplicates successful user signup into PostGres database after AWS Cognito Signup
      operationId: cognito.postConfirmation
      responses:
        default:
          description: Successful operation
        "500":
          description: Failure
      requestBody:
        content:
          application/json:
            schema:
              {
                type": object,
                required: [id, email, first_name, last_name, role],
                properties:
                  {
                    id: { type: string },
                    email: { type: string, format: email },
                    first_name: { type: string },
                    last_name: { type: string },
                    role: { type: string, value: user },
                  },
              }
